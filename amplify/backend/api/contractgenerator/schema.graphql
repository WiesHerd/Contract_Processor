type Template @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  description: String
  version: String
  s3Key: String!
  type: String
  contractYear: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Provider @model @auth(rules: [{ allow: public }]) {
  id: ID!
  employeeId: String
  name: String!
  providerType: String
  specialty: String
  subspecialty: String
  fte: Float
  administrativeFte: Float
  administrativeRole: String
  yearsExperience: Int
  hourlyWage: Float
  baseSalary: Float
  originalAgreementDate: AWSDate
  organizationName: String
  startDate: AWSDate
  contractTerm: String
  ptoDays: Int
  holidayDays: Int
  cmeDays: Int
  cmeAmount: Float
  signingBonus: Float
  educationBonus: Float
  qualityBonus: Float
  compensationType: String
  conversionFactor: Float
  wRVUTarget: Float
  compensationYear: String
  credentials: String
  compensationModel: String
  fteBreakdown: [FTEBreakdownComponent]
  templateTag: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type FTEBreakdownComponent {
  activity: String!
  percentage: Float!
}

type Mapping @model @auth(rules: [{ allow: public }]) {
  id: ID!
  templateID: ID! @index(name: "byTemplate", queryField: "mappingsByTemplateID") @index(name: "byTemplateAndProvider", queryField: "mappingsByTemplateAndProvider", sortKeyFields: ["providerID"])
  providerID: ID! @index(name: "byProvider", queryField: "mappingsByProviderID")
  field: String!
  value: String
}

type Clause @model @auth(rules: [{ allow: public }]) {
  id: ID!
  text: String!
  tags: [String]
  condition: String
}

type AuditLog @model @auth(rules: [{ allow: public }]) {
  id: ID!
  action: String!
  user: String
  timestamp: AWSDateTime!
  details: String
}

input DeleteTemplateInput {
  id: ID!
}

input DeleteProviderInput {
  id: ID!
  _version: Int
}

input DeleteMappingInput {
  id: ID!
}