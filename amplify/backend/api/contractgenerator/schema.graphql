type Template @model @auth(rules: [{ allow: owner, ownerField: "owner", operations: [create, update, delete, read] }]) {
  id: ID!
  name: String!
  description: String
  version: String
  s3Key: String!
  type: String
  contractYear: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  owner: String
}

type Provider @model @auth(rules: [{ allow: owner, ownerField: "owner", operations: [create, update, delete, read] }]) {
  id: ID!
  employeeId: String
  name: String!
  providerType: String
  specialty: String
  subspecialty: String
  fte: Float
  administrativeFte: Float
  administrativeRole: String
  yearsExperience: Int
  hourlyWage: Float
  baseSalary: Float
  originalAgreementDate: AWSDate
  organizationName: String
  startDate: AWSDate
  contractTerm: String
  ptoDays: Int
  holidayDays: Int
  cmeDays: Int
  cmeAmount: Float
  signingBonus: Float
  educationBonus: Float
  qualityBonus: Float
  compensationType: String
  conversionFactor: Float
  wRVUTarget: Float
  compensationYear: String @index(name: "byCompensationYear", queryField: "providersByCompensationYear")
  credentials: String
  compensationModel: String
  fteBreakdown: [FTEBreakdownComponent]
  templateTag: String
  dynamicFields: AWSJSON
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  owner: String
}

type FTEBreakdownComponent {
  activity: String!
  percentage: Float!
}

# Template-level field mappings (independent of providers)
type TemplateMapping @model @auth(rules: [{ allow: owner, ownerField: "owner", operations: [create, update, delete, read] }]) {
  id: ID!
  templateID: ID! @index(name: "byTemplate", queryField: "templateMappingsByTemplateID")
  field: String!
  value: String
  notes: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  owner: String
}

# User preferences for enterprise-grade personalization
type UserPreferences @model @auth(rules: [{ allow: owner, ownerField: "owner", operations: [create, update, delete, read] }]) {
  id: ID!
  userId: String! @index(name: "byUser", queryField: "userPreferencesByUserId")
  screen: String! # 'providers', 'templates', 'generator', etc.
  preferences: AWSJSON! # JSON object containing all preferences
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  owner: String
}

# Generator-specific preferences for column management and views
type GeneratorPreferences @model @auth(rules: [{ allow: owner, ownerField: "owner", operations: [create, update, delete, read] }]) {
  id: ID!
  userId: String! @index(name: "byGeneratorUser", queryField: "generatorPreferencesByUserId")
  columnPreferences: AWSJSON! # JSON object containing column visibility, order, pinning, saved views
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  owner: String
}

# Provider-specific field mappings (for custom overrides)
type Mapping @model @auth(rules: [{ allow: owner, ownerField: "owner", operations: [create, update, delete, read] }]) {
  id: ID!
  templateID: ID! @index(name: "byTemplate", queryField: "mappingsByTemplateID") @index(name: "byTemplateAndProvider", queryField: "mappingsByTemplateAndProvider", sortKeyFields: ["providerID"])
  providerID: ID! @index(name: "byProvider", queryField: "mappingsByProviderID")
  field: String!
  value: String
  owner: String
}

type Clause @model @auth(rules: [{ allow: owner, ownerField: "owner", operations: [create, update, delete, read] }]) {
  id: ID!
  text: String!
  tags: [String]
  condition: String
  owner: String
}

type DynamicBlock @model @auth(rules: [{ allow: owner, ownerField: "owner", operations: [create, update, delete, read] }]) {
  id: ID!
  name: String!
  description: String
  placeholder: String!
  outputType: String!
  format: String!
  conditions: AWSJSON
  alwaysInclude: AWSJSON
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  owner: String
}

type AuditLog @model @auth(rules: [{ allow: owner, ownerField: "owner", operations: [create, update, delete, read] }]) {
  id: ID!
  action: String!
  user: String
  timestamp: AWSDateTime!
  details: String
  owner: String
}

type ContractGenerationLog @model @auth(rules: [{ allow: owner, ownerField: "owner", operations: [create, update, delete, read] }]) {
  id: ID!
  providerId: ID! @index(name: "byProvider", queryField: "generationLogsByProvider")
  contractYear: String! @index(name: "byContractYear", queryField: "generationLogsByContractYear")
  templateId: ID!
  generatedAt: AWSDateTime!
  generatedBy: String
  outputType: String
  status: String
  fileUrl: String
  notes: String
  owner: String
}

# Custom queries
type Query {
  listProviderYears: [String]
}

type ProviderConnection {
  items: [Provider]
  nextToken: String
}

# Input types for ContractGenerationLog mutations
input CreateContractGenerationLogInput {
  providerId: ID!
  contractYear: String!
  templateId: ID!
  generatedAt: AWSDateTime!
  generatedBy: String
  outputType: String
  status: String
  fileUrl: String
  notes: String
  owner: String
}

input UpdateContractGenerationLogInput {
  id: ID!
  providerId: ID
  contractYear: String
  templateId: ID
  generatedAt: AWSDateTime
  generatedBy: String
  outputType: String
  status: String
  fileUrl: String
  notes: String
  owner: String
}

input DeleteContractGenerationLogInput {
  id: ID!
}

input DeleteTemplateInput {
  id: ID!
}

input DeleteProviderInput {
  id: ID!
  _version: Int
}

input DeleteMappingInput {
  id: ID!
}

input DeleteTemplateMappingInput {
  id: ID!
}

input CreateGeneratorPreferencesInput {
  userId: String!
  columnPreferences: AWSJSON!
}